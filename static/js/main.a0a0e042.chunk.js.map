{"version":3,"sources":["reportWebVitals.js","useWindowDimensions.js","copyToClipboard.js","canvasDisplay.js","Sidebar.js","canvas.js","useMousePosition.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getWindowDimensions","window","width","innerWidth","height","innerHeight","copyToClipboard","color1","color2","textArea","document","createElement","text","createTextNode","appendChild","body","select","execCommand","remove","canvasDisplay","topColor","bottomColor","top","bottom","className","style","backgroundImage","id","onClick","Sidebar","output","map","x","idx","ToggleDisplay","props","topColorSet","bottomColorSet","topColorVar","bottomColorVar","Canvas","useState","setTopColorSet","setBottomColorSet","mousePosition","y","setMousePosition","updateMousePosition","e","clientX","clientY","useEffect","addEventListener","removeEventListener","useMousePosition","windowDimensions","setWindowDimensions","handleResize","useWindowDimensions","sidebarWidthCSSVar","getComputedStyle","documentElement","getPropertyValue","split","sidebarWidth","parseFloat","substring","length","r","g","b","setB","Math","floor","useMousetrap","increaseB","decreaseB","setTop","setBottom","reset","Array","from","getElementsByClassName","color","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a0a0e042.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","const copyToClipboard = ([color1,color2]) => {\n    let textArea = document.createElement('TEXTAREA');\n    // text that will be copied\n    let text = document.createTextNode(`linear-gradient(${color1},${color2})`);\n\n    textArea.appendChild(text);\n    document.body.appendChild(textArea)\n    textArea.select();\n    document.execCommand('copy');\n    textArea.remove();\n  }\nexport default copyToClipboard","import copyToClipboard from './copyToClipboard.js'\nimport './css/canvasDisplay.css'\nexport const canvasDisplay = (topColor, bottomColor) =>  {\n    let top = `rgb(${topColor[0]},${topColor[1]},${topColor[2]})`;\n    let bottom = `rgb(${bottomColor[0]},${bottomColor[1]},${bottomColor[2]})`;\n    \n    return (\n      <div className='canvas-display'>\n        <div className='display color1'>Color: {`${top}`}</div>\n            <canvas \n                    style={{backgroundImage:`linear-gradient(${top},${bottom})`}} \n                    id='canvas' onClick={() => copyToClipboard([top,bottom])}>\n            </canvas>\n            <div className='display color2'>Color: {`${bottom}`}</div>\n      </div>)\n}\n","import './css/sidebar.css'\nconst Sidebar = () => {\n    let keys = ['+','-','t','b','r', 'click'];\n    let output = ['Add 3 to b value', 'Subtract 3 from b value', 'Fix top color', 'Fix bottom color','Reset fixed color to variable', 'Copy to clipboard']\n    return (\n        <div className = \"sidenav\">\n            <div className ='vertCenter'>\n               \n                <table>\n                <tr>\n                    <th>Key</th>\n                    <th>Action</th>\n                </tr>\n                    {keys.map((x,idx) => \n                    <tr>\n                        <td>{x}</td>\n                        <td>{output[idx]}</td>\n                    </tr>)\n                    }\n                </table>\n            </div>\n        </div>\n    )\n}\nexport default Sidebar","import './css/canvas.css';\nimport {useMousePosition} from './useMousePosition.js'\nimport {useWindowDimensions} from './useWindowDimensions'\nimport useMousetrap from 'react-hook-mousetrap';\nimport { useState } from 'react';\nimport {canvasDisplay} from './canvasDisplay.js'\nimport Sidebar from './Sidebar.js'\n\nconst ToggleDisplay = (props) => {\n    // set colors\n    let topColorSet = props.topColorSet;\n    let bottomColorSet = props.bottomColorSet;\n    \n    // variable colors\n    let topColorVar = props.topColorVar;\n    let bottomColorVar = props.bottomColorVar;\n\n    if        (topColorSet === false && bottomColorSet === false){\n        return canvasDisplay(topColorVar, bottomColorVar);\n    } else if (topColorSet === false && bottomColorSet !== false) {\n        return canvasDisplay(topColorVar,bottomColorSet)\n    } else if (topColorSet !== false && bottomColorSet === false) {\n        return canvasDisplay(topColorSet,bottomColorVar)\n    }\n    return (<h1>ERROR</h1>)\n}\n\nconst Canvas = () => {\n    // set States\n    const [topColorSet, setTopColorSet] = useState(false)\n    const [bottomColorSet, setBottomColorSet] = useState(false)\n    \n    // color measurements\n    const mousePosition = useMousePosition();\n    const {height,width} = useWindowDimensions();\n    let sidebarWidthCSSVar = getComputedStyle(document.documentElement).getPropertyValue('--grid-template-column').split(' ')[1];\n    let sidebarWidth = parseFloat(sidebarWidthCSSVar.substring(0,sidebarWidthCSSVar.length-2));\n    let r = mousePosition.y / height * 255;\n    let g = mousePosition.x/ (width * (1-sidebarWidth/100)) * 255;\n    if (g > 255) {\n        g = 255;\n    }\n\n    // set as state so it can be changed with + and -\n    let [b,setB] = useState(0);\n    let increaseB = (b) => {\n        if (b < 255) {\n            setB(b+3);\n        } \n    };\n    let decreaseB = (b) => {\n        if (b > 1) {\n            setB(b-3);\n        } \n    };\n    \n    let topColorVar = [Math.floor(r), Math.floor(g), Math.floor(b)]\n    let bottomColorVar = [Math.floor(g), Math.floor(r), Math.floor(b)]\n    \n    // key commands\n    useMousetrap('+', () => increaseB(b));\n    useMousetrap('-', () => decreaseB(b));\n    useMousetrap('t',() => setTop());\n    useMousetrap('b',() => setBottom());\n    useMousetrap('r',() => reset());\n    \n    // key command functions\n    let setTop = () => {\n        setTopColorSet(topColorVar)\n        setBottomColorSet(false)\n    };\n    let setBottom = () => {\n        setTopColorSet(false)\n        setBottomColorSet(bottomColorVar)\n    };\n    let reset = () => { \n        setTopColorSet(false);\n        setBottomColorSet(false);\n    };\n    \n    // change text color  \n    if ((r+g+b)< 150 ) {\n      Array.from(document.getElementsByClassName('display')).map(x=> x.style.color = 'white')\n    } else {\n      Array.from(document.getElementsByClassName('display')).map(x=> x.style.color = 'black')\n    }\n    return (\n      <div className=\"App\" > \n      <ToggleDisplay topColorSet={topColorSet} bottomColorSet={bottomColorSet} topColorVar={topColorVar} bottomColorVar={bottomColorVar} />\n      <Sidebar />\n      </div>\n      );\n}\n\nexport default Canvas;","import  { useState, useEffect } from \"react\";\n\nexport const useMousePosition = () => {\n    const [mousePosition, setMousePosition] = useState({x: null, y: null});\n    const updateMousePosition = e => {\n        setMousePosition({x: e.clientX, y: e.clientY})\n    }\n    useEffect(() => {\n        window.addEventListener(\"mousemove\", updateMousePosition);\n    \n        return () => window.removeEventListener(\"mousemove\", updateMousePosition);\n      }, []);\n      return mousePosition\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Canvas from './canvas.js' \n\n\nReactDOM.render(\n  <Canvas />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}